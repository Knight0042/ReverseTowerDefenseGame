import pygame, sys
import random
import time
import math
from functools import reduce
import os
import copy
import spritesheet

pygame.init()

# Define colors and fonts
black = (0, 0, 0)
black2 = (1, 1, 1)
white = (255, 255, 255)
red = (255, 0, 0)
blue = (0, 0, 255)
dark_blue = (0, 0, 150)
green = (0, 120, 0)
violet = (148, 0, 211)
orange = (255, 165, 0)
yellow = (255, 255, 0)
gray = (50, 50, 50)
gray2 = (100, 100, 100)
gray3 = (240, 240, 240)
gray4 = (150, 150, 150)
gray5 = (120, 120, 120)
menu_background_color = (200, 200, 200)
random_background_color = (209, 141, 203)

font1 = pygame.font.SysFont("bahnschrift", 250)
font2 = pygame.font.SysFont("bahnschrift", 45)
font3 = pygame.font.SysFont("bahnschrift", 32)
font4 = pygame.font.SysFont("bahnschrift", 30)
font5 = pygame.font.SysFont("bahnschrift", 150)
font6 = pygame.font.SysFont("bahnschrift", 27)
font7 = pygame.font.SysFont("bahnschrift", 25)

# Create the window
dis_width = 1280
dis_height = 720

dis = pygame.display.set_mode((dis_width, dis_height), pygame.FULLSCREEN)
pygame.display.set_caption('Reverse Tower Defence')

clock = pygame.time.Clock()
# Framerate
frmrt = 60
control_choice = 999


def load_images(horizontal_num, vertical_num, x, y, sprite_sheet_filename, color_key):
    image_list = []
    img = pygame.image.load(sprite_sheet_filename)
    img_width = img.get_width() / horizontal_num
    img_height = img.get_height() / vertical_num
    ss = spritesheet.spritesheet(sprite_sheet_filename)
    for r in range(0, vertical_num):
        for c in range(0, horizontal_num):
            image = ss.image_at(((x + c) * img_width, (y + r) * img_height, img_width,
                                 img_height), color_key)
            image_list.append(image)
    return image_list


total_number_of_towers_roads = 12
all_tower_images = load_images(total_number_of_towers_roads, 1, 0, 0, "sprite_images/towers_roads_spritesheet.png",
                               random_background_color)
headquarters_image = pygame.image.load("sprite_images/headquarters.png")
all_tower_images.append(headquarters_image)
small_headquarters_image = pygame.transform.scale(headquarters_image, [40, 40])
headquarters_cannon_images = load_images(2, 1, 0, 0, "sprite_images/headquarters_cannon_spritesheet.png",
                                         random_background_color)

barricade_image = all_tower_images[0]

general_tower_1_image = all_tower_images[4]
general_tower_cannon_images = load_images(2, 1, 0, 0, "sprite_images/general_tower_cannon_spritesheet.png",
                                          random_background_color)

machine_gun_tower_image = all_tower_images[5]
machine_gun_cannon_images = load_images(2, 1, 0, 0, "sprite_images/machine_gun_spritesheet.png",
                                        random_background_color)

range_tower_image = all_tower_images[7]
range_cannon_images = load_images(2, 1, 0, 0, "sprite_images/range_cannon_spritesheet.png", random_background_color)

small_explosive_tower_image = all_tower_images[8]
small_explosive_cannon_images = load_images(2, 1, 0, 0, "sprite_images/small_explosive_cannon_spritesheet.png",
                                            random_background_color)

big_explosive_tower_image = all_tower_images[1]
big_explosive_cannon_images = load_images(2, 1, 0, 0, "sprite_images/big_explosive_cannon_spritesheet.png",
                                          random_background_color)

railgun_tower_image = all_tower_images[6]
railgun_images = load_images(2, 1, 0, 0, "sprite_images/railgun_spritesheet.png", random_background_color)

skeleton_images = load_images(2, 1, 0, 0, "sprite_images/skeleton_spritesheet.png", random_background_color)

rifleman_images = load_images(2, 1, 0, 0, "sprite_images/rifleman_spritesheet.png", random_background_color)

machine_gunner_images = load_images(2, 1, 0, 0, "sprite_images/machine_gunner_spritesheet.png", random_background_color)

sniper_images = load_images(2, 1, 0, 0, "sprite_images/sniper_spritesheet.png", random_background_color)

battering_ram_images = load_images(2, 1, 0, 0, "sprite_images/battering_ram_spritesheet.png", random_background_color)

tank_image = pygame.image.load("sprite_images/tank.png")
tank_turret_images = load_images(2, 1, 0, 0, "sprite_images/tank_turret_spritesheet.png", random_background_color)

juggernaught_images = load_images(2, 1, 0, 0, "sprite_images/juggernaught_spritesheet.png", random_background_color)

demon_images = load_images(2, 1, 0, 0, "sprite_images/demon_spritesheet.png", random_background_color)

healer_images = load_images(2, 1, 0, 0, "sprite_images/healer_spritesheet.png", random_background_color)

vampire_images = load_images(2, 1, 0, 0, "sprite_images/vampire_spritesheet.png", random_background_color)

giant_images = load_images(2, 1, 0, 0, "sprite_images/giant_spritesheet.png", random_background_color)

summoner_images = load_images(2, 1, 0, 0, "sprite_images/summoner_spritesheet.png", random_background_color)

ghost_image = pygame.image.load("sprite_images/ghost.png")

leprechaun_images = load_images(2, 1, 0, 0, "sprite_images/leprechaun_spritesheet.png", random_background_color)

straight_road_image_1 = all_tower_images[10]
straight_road_image_2 = pygame.transform.rotate(straight_road_image_1, 90)
turn_road_image_1 = all_tower_images[11]
turn_road_image_2 = pygame.transform.rotate(turn_road_image_1, 90)
turn_road_image_3 = pygame.transform.rotate(turn_road_image_1, 180)
turn_road_image_4 = pygame.transform.rotate(turn_road_image_1, 270)

right_arrow_image = all_tower_images[9]
up_arrow_image = pygame.transform.rotate(right_arrow_image, 90)
left_arrow_image = pygame.transform.rotate(right_arrow_image, 180)
down_arrow_image = pygame.transform.rotate(right_arrow_image, 270)

right_up_arrow = all_tower_images[2]
down_left_arrow = all_tower_images[3]
up_left_arrow = pygame.transform.rotate(right_up_arrow, 90)
right_down_arrow = pygame.transform.rotate(down_left_arrow, 90)
left_down_arrow = pygame.transform.rotate(right_up_arrow, 180)
up_right_arrow = pygame.transform.rotate(down_left_arrow, 180)
down_right_arrow = pygame.transform.rotate(right_up_arrow, 270)
left_up_arrow = pygame.transform.rotate(down_left_arrow, 270)

right_arrow_button_icon = pygame.image.load("button_images/right_arrow_button_icon.png")
left_arrow_button_icon = pygame.transform.rotate(right_arrow_button_icon, 180)

settings_icon = pygame.image.load("button_images/settings_icon.png")
title_icon = pygame.image.load("button_images/swarm_surge_logo.png")
main_menu_button_icons = load_images(1, 7, 0, 0, "button_images/major_menu_button_icons_spritesheet.png",
                                     random_background_color)
post_level_button_icons = load_images(1, 3, 0, 0, "button_images/post_level_buttons_spritesheet.png",
                                     random_background_color)

yes_button_icon = pygame.image.load("button_images/yes_button_icon.png")
no_button_icon = pygame.image.load("button_images/no_button_icon.png")



with open("user_info.txt") as user_info:
    info = user_info.readlines()

    high_score_list = info[5].split()
    updated_high_score_list = []
    for high_score in high_score_list:
        updated_high_score_list.append(int(high_score))
    high_score_list = updated_high_score_list

    button_control_list = info[1].split()
    updated_button_control_list = []
    for choice in button_control_list:
        updated_button_control_list.append(int(choice))
    button_control_list = updated_button_control_list

    level_unlock_list = info[3].split()
    updated_level_unlock_list = []
    for level in level_unlock_list:
        updated_level_unlock_list.append(int(level))
    level_unlock_list = updated_level_unlock_list

    chosen_unit_list = info[7].split()
    updated_chosen_unit_list = []
    for unit in chosen_unit_list:
        updated_chosen_unit_list.append(int(unit))
    chosen_unit_list = updated_chosen_unit_list

    unit_unlock_list = info[9].split()
    updated_unit_unlock_list = []
    for unit in unit_unlock_list:
        updated_unit_unlock_list.append(int(unit))
    unit_unlock_list = updated_unit_unlock_list

    total_purchasing_balance = int(info[11])

custom_map_list = []
custom_map_balance_values = []
custom_high_score_list = []
custom_map_names = []
for filename in os.scandir('custom_maps'):
    if filename.is_file():
        with open(filename) as custom_map_data:
            map_info = custom_map_data.readlines()
            custom_map_name = map_info[0][:len(map_info[0]) - 1]
            custom_map_names.append(custom_map_name)
            custom_balance_value = int(map_info[1])
            custom_map_balance_values.append(custom_balance_value)
            custom_high_score_value = int(map_info[2])
            custom_high_score_list.append(custom_high_score_value)
            custom_map = []
            i = 0
            for row in map_info:
                if i != 0 and i != 1 and i != 2:
                    custom_map.append(eval(map_info[i]))
                i += 1
        custom_map_list.append(custom_map)
custom_map_values = []
i = -1
for c_m in custom_map_list:
    custom_map_values.append(i)
    i -= 1
# Maps 32x14

map_1 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

]
map_2 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_3 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 6, 9, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 9, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 10, 0, 2, 6, 9, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_4 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 10, 0, 4, 0, 11, 0, 0, 0, 2, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 9, 0, 2, 6, 0, 0, 4, 0, 0, 0, 0, 0, 17, 5, 5, 5, 5, 5, 5, 16, 0, 11, 0, 0, 0, 0, 4, 6, 10, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [1, 3, 3, 3, 12, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 10, 0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

map_5 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 13, 12, 7, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 15, 14, 0, 0, 11, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 10, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 14, 0, 8, 0, 0, 0],
    [1, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 15, 3, 0, 0, 0, 0],
    [0, 7, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 13, 12, 7, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 15, 14, 0, 0, 10, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 15, 14, 0, 13, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 9, 0, 0, 15, 3, 12, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

map_7 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 14, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 16, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 15, 3, 14, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 17, 5, 16, 0, 10, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 15, 3, 14, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 5, 16, 0, 11, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 15, 3, 14, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 5, 16, 0, 10, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 15, 3, 14, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 17, 5, 16, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

map_8 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 10, 0, 0, 11, 0, 0, 20, 0, 0, 11, 0, 10, 0, 0, 11, 0, 20, 0, 0, 11, 0, 20, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 11, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]

map_6 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 11, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 2, 0, 20, 0, 4, 0, 0, 0, 2, 0, 20, 0, 4, 0, 9, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 6, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 9, 0, 4, 0, 0, 0, 2, 0, 0, 0, 15, 3, 3, 3, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 6, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 20, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_9 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 20, 0, 11, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 2, 0, 10, 0, 0, 0, 0, 20, 0, 0, 11, 0, 0, 11, 0, 20, 0, 0, 0, 0, 11, 0, 0, 11, 0, 10, 0, 4, 0, 11, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 4, 6, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 10, 0, 4, 0, 11, 0],
    [0, 2, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 0, 0, 0],
    [1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 11, 0, 11, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_10 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 11, 0, 20, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 9, 0, 0, 0, 11, 0, 0, 10, 0, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 2, 0, 20, 0, 7, 0, 20, 0, 7, 0, 20, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 20, 0, 11, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 2, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

]
map_11 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 13, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 13, 3, 3, 12, 0, 0, 0, 0, 0, 21, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 13, 3, 3, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 9, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 20, 0, 13, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 20, 0, 13, 3, 3, 12, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 10, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0],
    [1, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_12 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 7, 20, 7, 0, 7, 20, 0, 4, 0],
    [0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 4, 6, 2, 6, 11, 0, 18, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 21, 2, 0, 0, 0, 4, 0, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 2, 6, 0, 0, 4, 0, 11, 0, 10, 0, 0, 10, 0, 11, 0, 0],
    [0, 2, 0, 11, 0, 0, 9, 0, 0, 11, 0, 0, 0, 0, 4, 0, 2, 0, 9, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 2, 6, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0],
    [0, 17, 5, 5, 5, 5, 5, 5, 5, 5, 16, 0, 0, 0, 4, 20, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0],
    [0, 0, 0, 7, 20, 7, 0, 7, 20, 0, 2, 0, 9, 0, 4, 0, 2, 0, 11, 0, 0, 0, 20, 0, 9, 0, 20, 0, 8, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 15, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 7, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_13 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 14, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 7, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 21, 0, 0, 15, 14, 6, 0, 21, 0, 0, 13, 12, 6, 0, 21, 0, 4, 6, 9, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 15, 14, 0, 13, 12, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 15, 3, 12, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 2, 6, 20, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 20, 0, 4, 6, 9, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_14 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 13, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 14, 0, 0],
    [0, 2, 0, 0, 7, 0, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 7, 0, 0, 4, 0, 0],
    [0, 17, 16, 0, 0, 21, 0, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 21, 0, 0, 18, 19, 0, 0],
    [0, 0, 17, 16, 0, 0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 0, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0, 0],
    [0, 0, 0, 17, 16, 6, 0, 0, 0, 0, 0, 15, 14, 6, 0, 21, 0, 0, 13, 12, 6, 0, 0, 0, 0, 0, 18, 19, 6, 0, 0, 0],
    [0, 0, 0, 0, 17, 16, 0, 0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 13, 12, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 17, 16, 0, 0, 0, 0, 0, 0, 15, 14, 0, 13, 12, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 20, 0, 0, 17, 16, 0, 0, 0, 0, 0, 0, 15, 3, 12, 0, 0, 0, 0, 0, 0, 18, 19, 0, 0, 20, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 10, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_15 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 22, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 2, 6, 11, 0, 0, 0, 0, 11, 0, 0, 4, 6, 0, 0, 2, 6, 0, 11, 0, 0, 0, 0, 11, 0, 4, 6, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 17, 5, 5, 5, 16, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 18, 5, 5, 5, 19, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 2, 0, 0, 0, 0, 0, 4, 6, 0, 0, 2, 6, 0, 0, 0, 0, 4, 0, 7, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 20, 0, 2, 6, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 6, 20, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 20, 0, 2, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 13, 3, 3, 3, 12, 0, 0, 0, 0, 0, 4, 6, 0, 0, 2, 6, 0, 0, 0, 0, 15, 3, 3, 3, 14, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 10, 0, 0, 0, 0, 0, 10, 0, 4, 0, 21, 0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_16 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 18, 5, 16, 0, 0, 0, 0, 0, 0, 0, 18, 5, 16, 0, 0, 0, 0, 0, 0, 0, 18, 5, 16, 0, 0, 0, 0],
    [0, 0, 0, 0, 18, 19, 7, 17, 16, 0, 0, 21, 0, 0, 18, 19, 7, 17, 16, 0, 0, 21, 0, 0, 18, 19, 7, 17, 16, 0, 0, 0],
    [0, 0, 0, 18, 19, 0, 0, 0, 17, 16, 0, 0, 0, 18, 19, 0, 0, 0, 17, 16, 0, 0, 0, 18, 19, 0, 0, 0, 17, 16, 0, 0],
    [0, 0, 0, 4, 0, 0, 22, 0, 0, 17, 16, 0, 18, 19, 0, 0, 22, 0, 0, 17, 16, 0, 18, 19, 0, 0, 22, 0, 0, 2, 0, 0],
    [0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 17, 5, 19, 0, 0, 0, 0, 0, 0, 0, 17, 5, 19, 0, 0, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0],
    [0, 0, 0, 0, 0, 0, 20, 0, 11, 0, 0, 9, 0, 0, 0, 0, 20, 0, 11, 0, 0, 9, 0, 0, 0, 0, 20, 0, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0]
]
map_17 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 20, 0, 2, 0, 7, 0, 4, 0, 20, 0, 2, 0, 7, 0, 4, 0, 20, 0, 2, 0, 7, 0, 4, 0, 20, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 22, 0, 4, 0, 0, 0, 2, 0, 22, 0, 4, 0, 0, 0, 2, 0, 22, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 6, 0, 0, 4, 6, 0, 0, 2, 6, 0, 0, 4, 6, 0, 0, 2, 6, 0, 0, 4, 6, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 12, 0, 20, 0, 4, 0, 22, 0, 2, 0, 0, 0, 4, 0, 22, 0, 2, 0, 0, 0, 4, 0, 22, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 2, 0, 21, 0, 4, 0, 0, 0, 2, 0, 20, 0, 4, 0, 0, 0, 8, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 12, 0, 0, 0, 15, 3, 3, 3, 12, 0, 0, 0, 15, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0]
]
map_18 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 13, 3, 14, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 13, 3, 3, 12, 7, 15, 3, 3, 14, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 12, 7, 0, 0, 21, 0, 0, 7, 15, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 20, 0, 0, 0, 13, 3, 12, 0, 0, 11, 0, 0, 0, 0, 0, 11, 0, 0, 15, 3, 14, 0, 0, 0, 20, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 13, 3, 12, 0, 7, 0, 0, 0, 0, 13, 3, 14, 0, 0, 0, 0, 7, 0, 15, 3, 14, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 13, 3, 12, 7, 0, 0, 11, 0, 0, 13, 3, 12, 0, 15, 3, 14, 0, 0, 11, 0, 0, 7, 15, 3, 14, 0, 0, 0, 0],
    [1, 3, 3, 12, 0, 0, 0, 0, 0, 0, 13, 3, 12, 0, 0, 0, 0, 0, 15, 14, 0, 0, 0, 21, 0, 0, 0, 4, 0, 20, 0, 0],
    [0, 0, 0, 0, 0, 21, 0, 13, 3, 3, 12, 0, 0, 0, 8, 0, 0, 0, 0, 4, 0, 11, 0, 0, 0, 18, 5, 19, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 22, 0, 0, 0, 0, 5, 5, 19, 0, 0, 0, 18, 5, 19, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 17, 5, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 5, 19, 7, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 7, 17, 5, 16, 0, 0, 0, 0, 0, 0, 0, 18, 5, 19, 7, 0, 0, 0, 20, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 7, 17, 5, 5, 16, 0, 18, 5, 5, 19, 7, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 17, 5, 19, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_19 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 8, 0, 0, 0],
    [0, 0, 0, 7, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 21, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 22, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 20, 0, 0, 0, 2, 0, 0, 7, 0, 0, 4, 0, 0, 0, 20, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 6, 0, 0, 0, 0, 2, 6, 0, 21, 0, 0, 4, 6, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 22, 0, 22, 0, 2, 0, 0, 0, 0, 0, 4, 0, 22, 0, 22, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 11, 0, 11, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_20 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 20, 0, 0, 22, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 20, 0, 0, 0, 22, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 7, 0, 0, 0, 0, 0, 7, 0, 4, 0, 0, 0],
    [0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 2, 0, 21, 0, 0, 11, 0, 0, 21, 0, 4, 6, 11, 0],
    [0, 2, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 4, 0, 20, 0, 21, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0],
    [0, 2, 0, 22, 0, 0, 0, 20, 0, 0, 22, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 18, 5, 5, 19, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 9, 0, 9, 0, 2, 6, 10, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],
    [0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 20, 0, 4, 6, 22, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 4, 0, 21, 0, 20, 0, 2, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 2, 0, 9, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0],
    [1, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_21 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 13, 3, 3, 3, 3, 3, 14, 0, 13, 3, 3, 3, 3, 14, 0, 8, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 7, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 6, 2, 6, 0, 0, 0, 15, 3, 0, 0, 0, 0],
    [0, 2, 0, 11, 0, 0, 21, 0, 0, 11, 0, 4, 20, 2, 0, 0, 22, 0, 0, 4, 20, 2, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 17, 5, 5, 5, 16, 0, 18, 5, 5, 5, 19, 0, 2, 0, 0, 0, 0, 0, 4, 6, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 7, 2, 0, 4, 7, 0, 0, 0, 0, 2, 0, 0, 22, 0, 0, 4, 20, 2, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 22, 0, 0, 2, 20, 4, 0, 0, 22, 0, 0, 2, 0, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 6, 4, 6, 0, 0, 0, 0, 2, 0, 18, 5, 5, 5, 19, 0, 17, 5, 5, 5, 16, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 2, 0, 4, 0, 0, 7, 0, 0, 0, 7, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 22, 0, 0, 2, 20, 4, 0, 0, 22, 0, 0, 2, 20, 4, 0, 11, 0, 0, 21, 0, 0, 11, 0, 2, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 2, 6, 4, 6, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 12, 0, 15, 3, 3, 3, 3, 3, 12, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
map_22 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0, 13, 3, 3, 3, 3, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 7, 0, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 2, 6, 22, 0, 21, 0, 22, 0, 0, 4, 6, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 4, 20, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 18, 5, 16, 0, 21, 0, 4, 6, 2, 0, 22, 0, 0, 0, 0, 0, 0, 0],
    [0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 4, 10, 2, 0, 0, 0, 4, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 11, 0, 0, 0, 11, 0, 0, 0, 11, 0, 0, 21, 0, 4, 0, 17, 5, 5, 5, 19, 0, 2, 0, 11, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 11, 0, 11, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 22, 0, 0, 22, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_23 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 15, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 14, 0, 0],
    [0, 0, 0, 7, 0, 15, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 12, 0, 7, 0, 4, 0, 0],
    [0, 0, 0, 21, 0, 0, 0, 7, 0, 15, 3, 3, 3, 14, 0, 0, 0, 13, 3, 3, 3, 12, 0, 7, 0, 0, 0, 21, 0, 4, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 7, 0, 15, 3, 3, 3, 12, 0, 7, 0, 0, 0, 21, 0, 0, 0, 0, 0, 4, 0, 0],
    [0, 18, 5, 5, 5, 16, 0, 0, 0, 0, 0, 21, 0, 0, 0, 7, 0, 0, 0, 21, 0, 0, 0, 0, 0, 18, 5, 5, 5, 19, 0, 0],
    [0, 4, 0, 7, 0, 17, 5, 5, 5, 16, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 18, 5, 5, 5, 19, 0, 7, 0, 0, 0, 0],
    [0, 4, 0, 22, 0, 0, 0, 7, 0, 17, 5, 5, 5, 16, 0, 0, 0, 18, 5, 5, 5, 19, 0, 7, 0, 0, 0, 22, 0, 0, 0, 0],
    [0, 4, 0, 0, 0, 21, 0, 22, 0, 0, 0, 7, 0, 17, 5, 5, 5, 19, 0, 7, 0, 0, 0, 22, 0, 21, 0, 0, 0, 0, 0, 0],
    [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 7, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0],
    [0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
map_24 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 0],
    [0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 4, 0],
    [0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 4, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 5, 5, 19, 0],
    [0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 4, 6, 7, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 14, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 4, 6],
    [0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0],
    [0, 0, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 19, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 7, 0, 0, 0, 0, 0, 7, 0, 0, 0]
]
map_25 = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 3, 3, 3, 3, 3, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 12, 0, 7, 0, 7, 0, 7, 0, 15, 3, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 13, 3, 12, 7, 0, 0, 10, 0, 21, 0, 10, 0, 0, 7, 15, 3, 14, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 13, 3, 12, 7, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 7, 15, 3, 14, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 13, 3, 12, 7, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 7, 15, 3, 14, 0, 0, 0],
    [1, 3, 3, 3, 12, 7, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 7, 15, 3, 14, 0],
    [0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 10, 0, 0, 7, 4, 0],
    [0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 4, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 18, 5, 5, 5, 5, 5, 5, 16, 0, 0, 0, 4, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 17, 5, 16, 0, 4, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 22, 0, 0, 0, 17, 5, 19, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 7, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
]
maleable_gameplay_map = []
map_list = [map_1, map_2, map_3, map_4, map_5, map_6, map_7, map_8, map_9, map_10, map_11, map_12, map_13, map_14,
            map_15, map_16, map_17, map_18, map_19, map_20, map_21, map_22, map_23, map_24, map_25]
map_balance_values = [150, 200, 200, 250, 250, 300, 350, 400, 350, 350, 1000, 1400, 2200, 2500, 1800, 1000, 2400, 4000, 4500,
                      6500, 7000, 8000, 9000, 10000, 10000]
map_completion_bonus = [50, 150, 250, 350, 450, 600, 650, 700, 800, 1000, 1200, 1400, 1600, 2000, 2200, 2400, 2600, 2800, 3000,
                        3500, 4000, 4500, 5000, 5500, 6000]

map_value_to_color = {0: white, 1: yellow, 2: yellow, 3: yellow, 4: yellow, 5: yellow, 6: black, 7: black, 8: orange,
                      9: black, 10: gray2, 11: gray4, 12: yellow, 13: yellow, 14: yellow, 15: yellow, 16: yellow,
                      17: yellow, 18: yellow, 19: yellow, 20: gray5, 21: red, 22: violet}

map_value_to_image = {1: straight_road_image_1, 2: straight_road_image_2, 3: straight_road_image_1,
                      4: straight_road_image_2, 5: straight_road_image_1, 6: barricade_image, 7: barricade_image,
                      8: small_headquarters_image, 9: general_tower_1_image, 10: machine_gun_tower_image,
                      11: range_tower_image, 12: turn_road_image_1, 13: turn_road_image_3, 14: turn_road_image_2,
                      15: turn_road_image_4, 16: turn_road_image_2, 17: turn_road_image_4, 18: turn_road_image_3,
                      19: turn_road_image_1, 20: small_explosive_tower_image, 21: big_explosive_tower_image,
                      22: railgun_tower_image}

# Sprite Lists
all_gameplay_sprites = pygame.sprite.Group()
unit_list = pygame.sprite.Group()
tower_list = pygame.sprite.Group()
combatant_list = pygame.sprite.Group()
track_list = pygame.sprite.Group()
environment_list = pygame.sprite.Group()
game_play_button_sprites = pygame.sprite.Group()
main_menu_button_sprites = pygame.sprite.Group()
level_select_menu_button_sprites = pygame.sprite.Group()
win_sprites = pygame.sprite.Group()
lose_sprites = pygame.sprite.Group()
settings_menu_button_sprites = pygame.sprite.Group()
control_menu_button_sprites = pygame.sprite.Group()
display_menu_button_sprites = pygame.sprite.Group()
audio_menu_button_sprites = pygame.sprite.Group()
unit_selection_menu_sprites = pygame.sprite.Group()
purchase_confirmation_sprites = pygame.sprite.Group()
custom_map_button_sprites = pygame.sprite.Group()
grid_space_sprites = pygame.sprite.Group()
map_value_button_sprites = pygame.sprite.Group()
visible_map_value_button_sprites = pygame.sprite.Group()
custom_map_menu_button_sprites = pygame.sprite.Group()
custom_map_select_button_sprites = pygame.sprite.Group()
custom_map_delete_button_sprites = pygame.sprite.Group()
unit_stats_menu_sprites = pygame.sprite.Group()

button_sprite_group_list = [main_menu_button_sprites, game_play_button_sprites, win_sprites,
                            level_select_menu_button_sprites, settings_menu_button_sprites, control_menu_button_sprites,
                            display_menu_button_sprites, audio_menu_button_sprites, unit_selection_menu_sprites,
                            purchase_confirmation_sprites, custom_map_button_sprites, grid_space_sprites,
                            map_value_button_sprites, custom_map_menu_button_sprites, custom_map_select_button_sprites,
                            unit_stats_menu_sprites, custom_map_delete_button_sprites]


# Function to updaate the dispaly with type value corresponding to a different screen. EX) if type = 0 that means display the main menu
def dis_update(angle, type):
    global error_visibility_timer
    global saving_error
    if type == 0:
        dis.fill(menu_background_color)
        # main_menu_button_sprites.draw(dis)
        dis.blit(settings_icon, [settings_menu_button.rect.x, settings_menu_button.rect.y])
        dis.blit(title_icon, [150, 10])
        i = 0
        for mmb_sprite in main_menu_button_sprites:
            if not mmb_sprite == settings_menu_button:
                dis.blit(main_menu_button_icons[i], [mmb_sprite.rect.x, mmb_sprite.rect.y])
                i += 1
                if i >= 4:
                    break
        # dis.blit(play_button_icon, [play_button.rect.x, play_button.rect.y])
        # dis.blit(level_selection_icon, [map_menu_button.rect.x, map_menu_button.rect.y])
        # dis.blit(unit_selection_icon, [unit_selection_menu_button.rect.x, unit_selection_menu_button.rect.y])
        # dis.blit(custom_level_icon, [custom_map_menu_button.rect.x, custom_map_menu_button.rect.y])
    if type == 1:
        dis.fill(green)
        # for tower in tower_list:
        #     tower_range = tower_range_list[tower.type2]
        #     for ang in range(0, 360):
        #         pygame.draw.aaline(dis, gray, tower.rect.center, [tower.rect.centerx + tower_range*math.cos(ang), tower.rect.centery + tower_range*math.sin(ang)])
        # for unit in unit_list:
        #     unit_range = unit_range_list[unit.type2]
        #     for ang in range(0, 360):
        #         pygame.draw.aaline(dis, gray, unit.rect.center, [unit.rect.centerx + unit_range*math.cos(ang), unit.rect.centery + unit_range*math.sin(ang)])
        # all_gameplay_sprites.draw(dis)
        game_play_button_sprites.draw(dis)
        i = 0
        for r in maleable_gameplay_map:
            i2 = 0
            for c in r:
                if c == 1 or c == 3 or c == 5:
                    dis.blit(straight_road_image_1, (i2 * 40, i * 40))
                elif c == 2 or c == 4:
                    dis.blit(straight_road_image_2, (i2 * 40, i * 40))
                elif c == 12 or c == 19:
                    dis.blit(turn_road_image_1, (i2 * 40, i * 40))
                elif c == 13 or c == 18:
                    dis.blit(turn_road_image_3, (i2 * 40, i * 40))
                elif c == 14 or c == 16:
                    dis.blit(turn_road_image_2, (i2 * 40, i * 40))
                elif c == 15 or c == 17:
                    dis.blit(turn_road_image_4, (i2 * 40, i * 40))
                elif c == 6:
                    dis.blit(barricade_image, ((i2 - 1) * 40, i * 40))
                elif c == 7:
                    dis.blit(barricade_image, ((i2) * 40, (i - 1) * 40))
                elif c == 8:
                    dis.blit(headquarters_image, ((i2) * 40, (i) * 40))
                elif c == 9:
                    dis.blit(general_tower_1_image, ((i2) * 40, (i) * 40))
                elif c == 10:
                    dis.blit(machine_gun_tower_image, ((i2) * 40, (i) * 40))
                elif c == 11:
                    dis.blit(range_tower_image, ((i2) * 40, (i) * 40))
                elif c == 20:
                    dis.blit(small_explosive_tower_image, ((i2) * 40, (i) * 40))
                elif c == 21:
                    dis.blit(big_explosive_tower_image, ((i2) * 40, (i) * 40))
                elif c == 22:
                    dis.blit(railgun_tower_image, ((i2) * 40, (i) * 40))
                i2 += 1
            i += 1
        for combatant in combatant_list:
            no_aim = False
            if combatant.type == 1:
                if combatant.type2 == 3 or combatant.type2 == 10:
                    no_aim = True
                if combatant.type2 == 0:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, rifleman_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 1:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, machine_gunner_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 2:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, sniper_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 3:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, battering_ram_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 4:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, [tank_image], 0,
                                               combatant.angle2)
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, tank_turret_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 5 or combatant.type2 == -2:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, skeleton_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 6:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, juggernaught_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 7:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, demon_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 8:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, vampire_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 9:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, healer_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 10:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, giant_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 11:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, summoner_images,
                                               firing_state, combatant.angle)
                if combatant.type2 == 12:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, [ghost_image, ghost_image],
                                               firing_state, combatant.angle)
                if combatant.type2 == 13:
                    firing_state = 0
                    if combatant.count2 < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, leprechaun_images,
                                               firing_state, combatant.angle)

                health_list = unit_health_list
                health_color = violet
            if combatant.type == 2:
                if combatant.type2 == 0:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery,
                                               headquarters_cannon_images, firing_state, combatant.angle)
                if combatant.type2 == 1:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery,
                                               general_tower_cannon_images, firing_state, combatant.angle)
                if combatant.type2 == 2:
                    no_aim = True

                if combatant.type2 == 3:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery,
                                               machine_gun_cannon_images, firing_state, combatant.angle)
                if combatant.type2 == 4:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, range_cannon_images,
                                               firing_state, combatant.angle)

                if combatant.type2 == 5:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery,
                                               small_explosive_cannon_images, firing_state, combatant.angle)
                if combatant.type2 == 6:
                    firing_state = 0
                    if combatant.count < 10:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery,
                                               big_explosive_cannon_images, firing_state, combatant.angle)
                if combatant.type2 == 7:
                    firing_state = 0
                    if combatant.count < 15:
                        firing_state = 1
                    rotate_image_around_center(combatant.rect.centerx, combatant.rect.centery, railgun_images,
                                               firing_state, combatant.angle)

                health_list = tower_health_list
                health_color = red
            pygame.draw.rect(dis, health_color,
                             [combatant.rect.centerx - health_list[combatant.type2] / 10, combatant.rect.top - 10,
                              combatant.health / 5, 3])
            # if not no_aim:
            #     pygame.draw.aaline(dis, red, combatant.rect.center, [combatant.rect.centerx+35*math.cos(combatant.angle), combatant.rect.centery+35*math.sin(combatant.angle)], 5)
        for button in game_play_button_sprites:
            cost_str = f"${unit_cost_list[button.type2]}"
            char_count = len(cost_str)
            cost_message = font6.render(cost_str, False, black)
            # 21 28
            dis.blit(cost_message, (button.rect.centerx - 7 * (char_count), button.rect.centery - 50))
            balance_message = font3.render(f"${current_balance}", False, black)
            spawn_button_label_message = font3.render(f"{unit_name_abbreviations[button.type2]}", False, black)
            dis.blit(spawn_button_label_message, (button.rect.x, button.rect.y))
            if unit_spawn_rate_list[button.type2] - button.count > 0:
                # pygame.draw.rect(dis, gray, [button.rect.x, button.rect.y, button.rect.width * (
                #             (unit_spawn_rate_list[button.type2] - button.count) / unit_spawn_rate_list[button.type2]),
                #                              button.rect.height])
                cover = pygame.Surface((button.rect.width * (
                            (unit_spawn_rate_list[button.type2] - button.count) / unit_spawn_rate_list[button.type2]),
                                        button.rect.height))  # the size of your rect
                cover.set_alpha(100)  # alpha level
                cover.fill(black)  # this fills the entire surface
                dis.blit(cover, (button.rect.x, button.rect.y))
        dis.blit(balance_message, (dis_width / 2 - 60, 590))
        if hq_destroyed:
            if map_choice >= 0:
                pygame.draw.rect(dis, gray, [440, 75, 400, 55])
                win_message = font2.render(f"High Score: {high_score_list[map_choice]}", False, violet)
                dis.blit(win_message, (460, 80))
                i = 0
                for w_s in win_sprites:
                    dis.blit(post_level_button_icons[i], (w_s.rect.x, w_s.rect.y))
                    i += 1
            else:
                win_message = font2.render(f"High Score: {custom_high_score_list[map_choice * -1 - 1]}",
                                           False, violet)
                dis.blit(win_message, (500, 100))
                i = 0
                for w_s in win_sprites:
                    dis.blit(post_level_button_icons[i], (w_s.rect.x, w_s.rect.y))
                    i += 1
        if level_lost:
            i = 0
            for w_s in lose_sprites:
                dis.blit(post_level_button_icons[i+1], (w_s.rect.x, w_s.rect.y))
                i += 1

    if type == 2:
        dis.fill(menu_background_color)
        level_select_menu_button_sprites.draw(dis)
        chosen_button = 0
        i = 0
        for map in level_select_menu_button_sprites:
            level_number_message = font6.render(f'Level {i+1}', False, black)
            dis.blit(level_number_message, (map.rect.x+15, map.rect.y+15))
            high_score_message = font6.render(f'High Score: {high_score_list[i]}', False, black)
            dis.blit(high_score_message, (map.rect.x + 10, map.rect.y + 55))
            if map_choice == i:
                chosen_button = map
            if level_unlock_list[i] == 1:
                lock = pygame.Surface((map.rect.width, map.rect.height))  # the size of your rect
                lock.set_alpha(128)  # alpha level
                lock.fill(black)  # this fills the entire surface
                dis.blit(lock, (map.rect.x, map.rect.y))
            i += 1
        if not chosen_button == 0:
            pygame.draw.rect(dis, yellow, [chosen_button.rect.x, chosen_button.rect.y, chosen_button.rect.width,
                                           chosen_button.rect.height], 5)
    if type == 3:
        dis.fill(menu_background_color)
        settings_menu_button_sprites.draw(dis)

        dis.blit(main_menu_button_icons[5], (controls_menu_button.rect.x, controls_menu_button.rect.y))
        dis.blit(main_menu_button_icons[6], (reset_button.rect.x, reset_button.rect.y))

        wip_message = font2.render('Work In Progress', False, black)
        dis.blit(wip_message, (display_menu_button.rect.x+5, display_menu_button.rect.y+5))
        dis.blit(wip_message, (audio_menu_button.rect.x + 5, audio_menu_button.rect.y + 5))
    if type == 4:
        dis.fill(menu_background_color)
        control_menu_button_sprites.draw(dis)
        i = 0
        for control in control_menu_button_sprites:
            key_name_message = font5.render(f'{pygame.key.name(button_control_list[i])}', False, black)
            dis.blit(key_name_message, (control.rect.x, control.rect.y))
            if control_choice == i:
                chosen_button = control
            i += 1
        if not control_choice == 999:
            pygame.draw.rect(dis, yellow, [chosen_button.rect.x, chosen_button.rect.y, chosen_button.rect.width,
                                           chosen_button.rect.height], 5)
    if type == 5:
        dis.fill(menu_background_color)
        display_menu_button_sprites.draw(dis)
    if type == 6:
        dis.fill(menu_background_color)
        audio_menu_button_sprites.draw(dis)
    if type == 7:
        dis.fill(menu_background_color)
        unit_selection_menu_sprites.draw(dis)
        unit_stats_menu_sprites.draw(dis)
        overall_balance_message = font2.render(f"${total_purchasing_balance}", False, black)
        dis.blit(overall_balance_message, (700, 40))
        unit_list_message = font2.render("Current Unit List", False, black)
        dis.blit(unit_list_message, (200, 40))
        i = 0
        for unit in chosen_unit_list:
            unit_name_message = font2.render(f'{unit_names_list[chosen_unit_list[i]]}', False, black)
            dis.blit(unit_name_message, (200, 75 + 35 * i))
            i += 1
        i = 0
        for unit in unit_selection_menu_sprites:
            unit_name_message = font7.render(f'{unit_names_list[i]}', False, gray3)
            dis.blit(unit_name_message, (unit.rect.x + 5, unit.rect.y + 5))
            for u in chosen_unit_list:
                if unit.type2 == u:
                    pygame.draw.rect(dis, yellow, [unit.rect.x, unit.rect.y, unit.rect.width, unit.rect.height], 5)
            if unit_unlock_list[i] == 1:
                lock = pygame.Surface((unit.rect.width, unit.rect.height))  # the size of your rect
                lock.set_alpha(100)  # alpha level
                lock.fill(black)  # this fills the entire surface
                dis.blit(lock, (unit.rect.x, unit.rect.y))
                unit_purchase_cost_message = font3.render(f'${unit_purchase_cost_list[i]}', False, gray3)
                dis.blit(unit_purchase_cost_message, (unit.rect.x + 90, unit.rect.y + 35))
            i += 1
        for stats_button in unit_stats_menu_sprites:
            stat_label_message = font6.render('Stats', False, gray3)
            dis.blit(stat_label_message, (stats_button.rect.x + 5, stats_button.rect.y+2))
    if type == 8:
        dis_update(-0.5, 7)
        pygame.draw.rect(dis, gray, [dis_width / 2 - 350, dis_height / 2 - 200, 700, 400])
        confirmation_message = font6.render(f'Are You Sure You Want to Purchase {unit_names_list[purchasing_unit]}?',
                                            False, white)
        dis.blit(confirmation_message, (dis_width / 2 - 330, dis_height / 2 - 150))
        dis.blit(no_button_icon, (cancel_button.rect.x, cancel_button.rect.y))
        dis.blit(yes_button_icon, (confirm_button.rect.x, confirm_button.rect.y))
    if type == 9:
        dis.fill(dark_blue)
        grid_space_sprites.draw(dis)
        custom_map_button_sprites.draw(dis)
        visible_map_value_button_sprites.draw(dis)
        i = 0
        for sprite in visible_map_value_button_sprites:
            dis.blit(map_value_to_image[sprite.type2], (sprite.rect.x, sprite.rect.y))
        for r in custom_gameboard:
            i2 = 0
            for c in r:
                if c == 1 or c == 3 or c == 5:
                    dis.blit(straight_road_image_1, (i2 * 40, i * 40 + 100))
                    if c == 1 or c == 3:
                        dis.blit(right_arrow_image, (i2 * 40, i * 40 + 100))
                    if c == 5:
                        dis.blit(left_arrow_image, (i2 * 40, i * 40 + 100))
                elif c == 2 or c == 4:
                    dis.blit(straight_road_image_2, (i2 * 40, i * 40 + 100))
                    if c == 2:
                        dis.blit(up_arrow_image, (i2 * 40, i * 40 + 100))
                    if c == 4:
                        dis.blit(down_arrow_image, (i2 * 40, i * 40 + 100))
                elif c == 12 or c == 19:
                    dis.blit(turn_road_image_1, (i2 * 40, i * 40 + 100))
                    if c == 12:
                        dis.blit(right_up_arrow, (i2 * 40, i * 40 + 100))
                    if c == 19:
                        dis.blit(down_left_arrow, (i2 * 40, i * 40 + 100))
                elif c == 13 or c == 18:
                    dis.blit(turn_road_image_3, (i2 * 40, i * 40 + 100))
                    if c == 13:
                        dis.blit(up_right_arrow, (i2 * 40, i * 40 + 100))
                    if c == 18:
                        dis.blit(left_down_arrow, (i2 * 40, i * 40 + 100))
                elif c == 14 or c == 16:
                    dis.blit(turn_road_image_2, (i2 * 40, i * 40 + 100))
                    if c == 14:
                        dis.blit(right_down_arrow, (i2 * 40, i * 40 + 100))
                    if c == 16:
                        dis.blit(up_left_arrow, (i2 * 40, i * 40 + 100))
                elif c == 15 or c == 17:
                    dis.blit(turn_road_image_4, (i2 * 40, i * 40 + 100))
                    if c == 15:
                        dis.blit(down_right_arrow, (i2 * 40, i * 40 + 100))
                    if c == 17:
                        dis.blit(left_up_arrow, (i2 * 40, i * 40 + 100))
                elif c == 6:
                    dis.blit(barricade_image, ((i2 - 1) * 40, i * 40 + 100))
                elif c == 7:
                    dis.blit(barricade_image, ((i2) * 40, (i - 1) * 40 + 100))
                elif c == 8:
                    dis.blit(headquarters_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 9:
                    dis.blit(general_tower_1_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 10:
                    dis.blit(machine_gun_tower_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 11:
                    dis.blit(range_tower_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 20:
                    dis.blit(small_explosive_tower_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 21:
                    dis.blit(big_explosive_tower_image, ((i2) * 40, (i) * 40 + 100))
                elif c == 22:
                    dis.blit(railgun_tower_image, ((i2) * 40, (i) * 40 + 100))
                i2 += 1
            i += 1
        if erasing:
            pygame.draw.rect(dis, yellow, [150, 25, 100, 50], 3)
        if saving_error:
            error_message = font6.render('File Already Exists', False, yellow, black)
            dis.blit(error_message, (30, 77))
            error_visibility_timer += 1
            if error_visibility_timer > 180:
                saving_error = False
                error_visibility_timer = 0
        direct_value_message = font2.render(num_choice_string, False, black)
        dis.blit(direct_value_message, (dis_width - 880, 25))
        balance_message = font2.render('$' + balance_string, False, black)
        dis.blit(balance_message, (dis_width - 150, 25))
        map_name_message = font2.render('Name: ' + custom_map_name, False, black)
        dis.blit(map_name_message, (30, dis_height - 50))

        save_label_message = font2.render('Save', False, black)
        dis.blit(save_label_message, (save_button.rect.x+2, save_button.rect.y+2))
        erase_label_message = font6.render('Eraser', False, black)
        dis.blit(erase_label_message, (erase_button.rect.x + 5, save_button.rect.y + 5))
        import_label_message = font6.render('Import', False, gray3)
        dis.blit(import_label_message, (import_button.rect.x + 5, save_button.rect.y + 5))

        dis.blit(right_arrow_button_icon, (rotate_right.rect.x, rotate_right.rect.y))
        dis.blit(left_arrow_button_icon, (rotate_left.rect.x, rotate_left.rect.y))
    if type == 10:
        dis.fill(menu_background_color)
        custom_map_menu_button_sprites.draw(dis)
        dis.blit(main_menu_button_icons[1], [custom_map_select_menu_button.rect.x, custom_map_select_menu_button.rect.y])
        dis.blit(main_menu_button_icons[4], [custom_map_create_menu_button.rect.x, custom_map_create_menu_button.rect.y])
    if type == 11:
        dis.fill(menu_background_color)
        custom_map_select_button_sprites.draw(dis)
        custom_map_delete_button_sprites.draw(dis)
        chosen_button = 0
        i = -1
        for map in custom_map_select_button_sprites:
            level_number_message = font6.render(f'{custom_map_names[-i-1]}', False, black)
            dis.blit(level_number_message, (map.rect.x + 15, map.rect.y + 15))
            high_score_message = font6.render(f'High Score: {custom_high_score_list[-i-1]}', False, black)
            dis.blit(high_score_message, (map.rect.x + 15, map.rect.y + 55))
            if map_choice == i:
                chosen_button = map
            i -= 1
        if not chosen_button == 0 and not angle == 12:
            pygame.draw.rect(dis, yellow, [chosen_button.rect.x, chosen_button.rect.y, chosen_button.rect.width,
                                           chosen_button.rect.height], 5)
        for d_button in custom_map_delete_button_sprites:
            level_number_message = font6.render('Delete', False, white)
            dis.blit(level_number_message, (d_button.rect.x + 5, d_button.rect.y + 5))
    if type == 12:
        dis_update(12, 11)
    if type == 13:
        dis_update(-0.5, 3)
        pygame.draw.rect(dis, gray, [dis_width / 2 - 350, dis_height / 2 - 200, 700, 400])
        confirmation_message = font6.render('Are You Sure You Want to Reset All Progress?', False, white)
        dis.blit(confirmation_message, (dis_width / 2 - 330, dis_height / 2 - 150))
        dis.blit(no_button_icon, (cancel_button.rect.x, cancel_button.rect.y))
        dis.blit(yes_button_icon, (confirm_button.rect.x, confirm_button.rect.y))
    if type == 14:
        dis_update(-0.5, 11)
        pygame.draw.rect(dis, gray, [dis_width / 2 - 350, dis_height / 2 - 200, 700, 400])
        confirmation_message = font6.render(f'Are You Sure You Want to Delete {deleting_map_name}?', False, white)
        dis.blit(confirmation_message, (dis_width / 2 - 330, dis_height / 2 - 150))
        dis.blit(no_button_icon, (cancel_button.rect.x, cancel_button.rect.y))
        dis.blit(yes_button_icon, (confirm_button.rect.x, confirm_button.rect.y))
    if type == 15:
        dis_update(-0.5, 7)
        pygame.draw.rect(dis, gray, [dis_width / 2 - 350, dis_height / 2 - 200, 700, 400])
        stat_messages = [f'{active_stat_sheet[0]} Statistics', f'Cost: {active_stat_sheet[1]}',
                         f'Health: {active_stat_sheet[2]}',
                         f'Damage Per Second: {round(active_stat_sheet[3]*frmrt/active_stat_sheet[4], 2)}',
                         f'Range: {active_stat_sheet[5]}', f'Speed: {active_stat_sheet[6]}',
                         f'Spawn Rate: {round(active_stat_sheet[7]/frmrt, 2)}s', f'Size: {active_stat_sheet[8]}',
                         f'Special Characteristics: {active_stat_sheet[9]}', f'{active_stat_sheet[10]}']
        i = 0
        for stat_message in stat_messages:
            if i == 0:
                stats_message = font2.render(stat_message, False, white)
                dis.blit(stats_message, (dis_width / 2 - 330, dis_height / 2 - 180))
            else:
                stats_message = font3.render(stat_message, False, white)
                dis.blit(stats_message, (dis_width / 2 - 330, dis_height / 2 - 160 + (35 * i)))
            i += 1

    if not angle == -0.5:
        pygame.display.flip()


def factor(n):
    return reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))


def rotate_image_around_center(x, y, image_list, image_list_index, angle):
    image_width = image_list[0].get_width()
    image_height = image_list[0].get_height()
    if 0 <= -angle <= (math.pi / 2):
        difference_to_center = (image_width * (math.cos(-angle) + math.sin(-angle))) / 2 - image_width / 2
        dis.blit(pygame.transform.rotate(image_list[image_list_index], -math.degrees(angle)),
                 ((x - image_width / 2 - difference_to_center), (y - image_height / 2 - difference_to_center)))
    elif math.pi / 2 < angle <= (math.pi):
        difference_to_center = (image_width * (-math.cos(angle) + math.sin(angle))) / 2 - image_width / 2
        dis.blit(pygame.transform.rotate(image_list[image_list_index], -math.degrees(angle)),
                 ((x - image_width / 2 - difference_to_center), (y - image_height / 2 - difference_to_center)))
    elif math.pi < angle <= (3 * math.pi / 2):
        difference_to_center = (-image_width * (math.cos(-angle) - math.sin(-angle))) / 2 - image_width / 2
        dis.blit(pygame.transform.rotate(image_list[image_list_index], -math.degrees(angle)),
                 ((x - image_width / 2 - difference_to_center), (y - image_height / 2 - difference_to_center)))
    elif 3 * math.pi / 2 <= 2 * math.pi - angle < 2 * math.pi:
        difference_to_center = (image_width * (math.cos(angle) + math.sin(angle))) / 2 - image_width / 2
        dis.blit(pygame.transform.rotate(image_list[image_list_index], -math.degrees(angle)),
                 ((x - image_width / 2 - difference_to_center), (y - image_height / 2 - difference_to_center)))


# Any sprite that has an interaction with another sprite
class Hitbox(pygame.sprite.Sprite):
    def __init__(self, width, height, x, y, color, type, angle, type2):
        super().__init__()
        rectangle = pygame.Surface([width, height])
        rectangle.fill(color)
        self.image = rectangle
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.type = type
        self.count = 0
        self.count3 = 99999
        self.type2 = type2
        self.angle = angle
        self.angle2 = 0
        all_gameplay_sprites.add(self)
        if type == 1:
            unit_list.add(self)
            combatant_list.add(self)
            self.count2 = 99999
            self.movement_val = 1
            self.health = unit_health_list[self.type2]
        if type == 2:
            self.health = tower_health_list[self.type2]
            self.count = 99999
            tower_list.add(self)
            combatant_list.add(self)
        if type == 3:
            track_list.add(self)


class Combatant(Hitbox):
    def target(self, target):
        if self.type == 1:
            target.health -= unit_damage_list[self.type2]
        if self.type == 2:
            target.health -= tower_damage_list[self.type2]


class Button(pygame.sprite.Sprite):
    def __init__(self, width, height, x, y, color, type, angle, type2):
        super().__init__()
        rectangle = pygame.Surface([width, height])
        rectangle.fill(color)
        self.image = rectangle
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.type = type
        self.count = 999999
        self.type2 = type2
        self.angle = angle
        self.mimic = False
        if self.type2 == 14:
            self.mimic = True
        self.original_type = self.type2
        button_sprite_group_list[type].add(self)
        if type == 1:
            all_gameplay_sprites.add(self)
        if type == 2:
            if type2 == 1 or type2 == 2:
                lose_sprites.add(self)

    def spawn_unit(self, location):
        unit = Combatant(unit_size_list[self.type2], unit_size_list[self.type2], location[0], location[1], blue, 1, 0,
                         self.type2)

    def change_color(self, color):
        self.color = color
        pygame.draw.rect(self.image, self.color, [0, 0, self.rect.width, self.rect.height])


def level_creation(level_number):
    global hq_destroyed
    global current_balance
    global start_location
    global level_lost
    global past_high_score
    global maleable_gameplay_map
    global hq_just_destroyed
    global previously_chosen_unit
    for sprite in all_gameplay_sprites:
        sprite.kill()
    i = 0
    for n in chosen_unit_list:
        button = Button(50, 50, dis_width / 2 - 130 + 70 * i, 640, blue, 1, 0, chosen_unit_list[i])
        i += 1
    if level_number >= 0:
        chosen_map_list = map_list
        chosen_high_score_list = high_score_list
        chosen_balance_list = map_balance_values
    elif level_number < 0:
        chosen_map_list = custom_map_list
        chosen_high_score_list = custom_high_score_list
        chosen_balance_list = custom_map_balance_values
        level_number = (level_number * -1) - 1
    r_count = 0
    for r in chosen_map_list[level_number]:
        c_count = 0
        for c in r:
            rand_ang = round(random.uniform(0, 2 * math.pi), 3)
            if 3 * math.pi / 2 < rand_ang <= 2 * math.pi:
                rand_ang -= 2 * math.pi
            if c == 1:
                start_location = [c_count * 40, r_count * 40]
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
            if c == 2:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi / 2, 0)
            if c == 3:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
            if c == 4:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 3 * math.pi / 2, 0)
            if c == 5:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi, 0)
            if c == 6:
                barricade = Combatant(40, 40, (c_count - 1) * 40, r_count * 40, black, 2, 0, 2)
            if c == 7:
                barricade = Combatant(40, 40, c_count * 40, (r_count - 1) * 40, black, 2, 1, 2)
            if c == 8:
                hq = Combatant(120, 120, c_count * 40, r_count * 40, orange, 2, rand_ang, 0)
            if c == 9:
                # rand_ang = round(random.uniform(0, 2*math.pi), 3)
                # # if 0 < rand_ang <= math.pi/2:
                # #     rand_ang = rand_ang*-1
                # if 3*math.pi/2 < rand_ang <= 2*math.pi:
                #     rand_ang -= 2*math.pi
                tower_standard = Combatant(40, 40, c_count * 40, r_count * 40, black, 2, rand_ang, 1)
            if c == 10:
                tower_machine_gun = Combatant(40, 40, c_count * 40, r_count * 40, gray2, 2, rand_ang, 3)
            if c == 11:
                tower_distance = Combatant(40, 40, c_count * 40, r_count * 40, gray4, 2, rand_ang, 4)
            if c == 12:
                track = Hitbox(20, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi / 2, 0)
            if c == 13:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
                track = Hitbox(40, 20, c_count * 40, r_count * 40 + 20, yellow, 3, math.pi / 2, 0)
            if c == 14:
                track = Hitbox(20, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 3 * math.pi / 2, 0)
            if c == 15:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 0, 0)
                track = Hitbox(40, 20, c_count * 40, r_count * 40, yellow, 3, 3 * math.pi / 2, 0)
            if c == 16:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi, 0)
                track = Hitbox(40, 20, c_count * 40, r_count * 40 + 20, yellow, 3, math.pi / 2, 0)
            if c == 17:
                track = Hitbox(20, 40, c_count * 40 + 20, r_count * 40, yellow, 3, math.pi, 0)
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi / 2, 0)
            if c == 18:
                track = Hitbox(20, 40, c_count * 40 + 20, r_count * 40, yellow, 3, math.pi, 0)
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, 3 * math.pi / 2, 0)
            if c == 19:
                track = Hitbox(40, 40, c_count * 40, r_count * 40, yellow, 3, math.pi, 0)
                track = Hitbox(40, 20, c_count * 40, r_count * 40, yellow, 3, 3 * math.pi / 2, 0)
            if c == 20:
                tower_explosive = Combatant(40, 40, c_count * 40, r_count * 40, gray5, 2, rand_ang, 5)
            if c == 21:
                tower_watch_tower = Combatant(40, 40, c_count * 40, r_count * 40, red, 2, rand_ang, 6)
            if c == 22:
                tower_rail_gun = Combatant(40, 40, c_count * 40, r_count * 40, violet, 2, rand_ang, 7)
            c_count += 1
        r_count += 1

    hq_destroyed = False
    hq_just_destroyed = True
    level_lost = False
    previously_chosen_unit = 14
    past_high_score = chosen_high_score_list[map_choice]
    current_balance = chosen_balance_list[level_number]
    maleable_gameplay_map = copy.deepcopy(chosen_map_list[level_number])


def automated_menu_maker(button_list, button_gap, left_border, right_border, top_border, bottom_border, button_color,
                         button_type):
    count = len(button_list)
    factor_list = factor(count)
    if len(factor_list) == 2 and count > 3:
        factor_list = factor(count + 1)
    lowest_factor_total = 99999999
    for f in range(0, len(factor_list), 2):
        factor_total = factor_list[f] + factor_list[f + 1]
        if factor_total < lowest_factor_total:
            lowest_factor_total = factor_total
            factor_1 = factor_list[f]
            factor_2 = factor_list[f + 1]

    button_width = (dis_width - (left_border + right_border) - (button_gap * (factor_2 - 1))) / (factor_2)
    button_height = (dis_height - (top_border + bottom_border) - (button_gap * (factor_1 - 1))) / (factor_1)

    i = 0
    for r in range(factor_1):
        for c in range(factor_2):
            if not i >= len(button_list):
                menu_button = Button(button_width, button_height, c * (button_width + button_gap) + left_border,
                                     r * (button_height + button_gap) + top_border, button_color, button_type, 0, i)
            i += 1


in_main_menu = True
# Unit and tower stats
unit_names_list = ["Rifleman", "Machine Gunner", "Sniper", "Battering Ram", "Tank", "Skeleton", "Juggernaught", "Demon",
                   "Vampire", "Healer", "Giant", "Summoner", "Ghost", "Leprechaun", "Mimic", "Minion", "Pheonix",
                   "Reflector", "Zombie", "Railgun Man", "Cyborg", "Wizard", "Paratroopers", "General (firerate)",
                   "Empty"]
unit_speed_list = [4, 4, 3, 3, 3, 5, 3, 3, 4, 3, 2, 2, 3, 4, 3, 5, 0]
unit_damage_list = [3, 13, 85, 400, 26, 1, 50, 25, 15, -4, 800, 30, 0, 50, 0, 1, 0]
unit_health_list = [30, 100, 80, 350, 300, 5, 1200, 900, 320, 180, 2500, 300, 1, 250, 0, 5, 0]
unit_range_list = [100, 105, 145, 20, 130, 90, 150, 130, 100, 135, 26, 120, 0, 125, 0, 90, 0]
unit_fire_rate_list = [60, 30, 150, 300, 30, 120, 30, 5, 20, 30, 150, 60, 999, 90, 100, 120, 0]
unit_size_list = [18, 20, 15, 30, 25, 10, 35, 25, 22, 17, 50, 22, 25, 15, 20, 10, 0]
unit_spawn_rate_list = [45, 90, 120, 180, 300, 30, 900, 120, 200, 180, 480, 180, 600, 800, 300, 180, -1]
unit_cost_list = [10, 50, 75, 75, 150, 5, 1000, 400, 200, 125, 600, 350, 800, 300, 0, 0, 0]
unit_purchase_cost_list = [0, 0, 0, 1250, 1500, 1800, 3000, 5000, 5000, 3500, 6500, 8000, 10000, 12000, 15000, 0, 0]
unit_placeholder_list = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
summoner_summon_speed = 45
leprechaun_money_speed = 45
leprechaun_money_total = 15

unit_message_list = ['None', 'None', 'None', 'Only damages', 'None', 'None', 'None',
                     'All damage the Demon', 'All the damage the', 'Heals nearby troops',
                     'Only damages', 'Summons skeletons', 'Deals and receives',
                     f'Earns ${round(leprechaun_money_total*frmrt/leprechaun_money_speed, 2)} per',
                     'Copies all of the']
unit_message_list2 = ['', '', '', 'barricades and the headquarters', '', '', '', 'does is also done to itself',
                      'Vampire does heals itself the same amount', 'but does not damage towers',
                      'barricades and the headquarters',
                      f'at {round(frmrt/summoner_summon_speed, 2)} skeletons per second', 'no damage',
                      'second and double when in range of a tower', 'characteristics of the previous unit']
unit_name_abbreviations = ["RM", "MG", "Sn", "BR", "Tk", "Sk", "JG", "Va", "He", "Gi", "Su", "Go", "Le", "Mi", "E"]


active_stat_sheet = ["Placeholder Gunner", 1, 2, 3, 4, 5, 6, 7, "Placeholder"]

tower_range_list = [200, 160, 0, 120, 240, 120, 220, 260]
tower_damage_list = [80, 50, 0, 40, 150, 20, 120, 1250]
tower_health_list = [500, 250, 400, 250, 350, 200, 800, 1000]
tower_fire_rate_list = [45, 80, 0, 15, 100, 38, 90, 150]
tower_value_list = [0, 100, 50, 150, 150, 200, 400, 500]

play_button = Button(700, 100, 300, 200, yellow, 0, 0, 0)

map_menu_button = Button(700, 100, 300, 325, green, 0, 0, 1)
automated_menu_maker(map_list, 20, 20, 20, 20, 20, green, 3)

settings_menu_button = Button(80, 80, 1150, 35, black, 0, 0, 2)
controls_menu_button = Button(700, 100, 300, 100, orange, 4, 0, 0)
automated_menu_maker(button_control_list, 20, 100, 100, 20, 300, blue, 5)
display_menu_button = Button(700, 100, 300, 250, gray, 4, 0, 1)
audio_menu_button = Button(700, 100, 300, 400, violet, 4, 0, 2)
reset_button = Button(700, 100, 300, 550, black, 4, 0, 3)

unit_selection_menu_button = Button(700, 100, 300, 450, blue, 0, 0, 3)
automated_menu_maker(unit_placeholder_list, 25, 100, 100, 300, 100, blue, 8)
i = 0
for unit_button in unit_selection_menu_sprites:
    stat_button = Button(75, 35, unit_button.rect.x + 10, unit_button.rect.y + 35, black, 15, 0, i)
    i += 1
cancel_button = Button(250, 200, 320, 260, red, 9, 0, 0)
confirm_button = Button(250, 200, 670, 260, green, 9, 0, 1)

custom_map_menu_button = Button(700, 100, 300, 575, red, 0, 0, 4)
custom_map_select_menu_button = Button(700, 100, 300, 50, green, 13, 0, 0)
automated_menu_maker(custom_map_list, 20, 20, 20, 20, 20, green, 14)
for unit_button in custom_map_select_button_sprites:
    delete_button = Button(100, 35, unit_button.rect.x + 15, unit_button.rect.y + 100, red, 16, 0, i)
    i += 1
custom_map_create_menu_button = Button(700, 100, 300, 200, red, 13, 0, 1)
save_button = Button(100, 50, 25, 25, yellow, 10, 0, 0)
erase_button = Button(100, 50, 150, 25, red, 10, 0, 1)
direct_value_change_text_box = Button(55, 50, dis_width - 880, 25, gray3, 10, 0, 2)
rotate_left = Button(50, 50, dis_width - 800, 25, gray4, 10, 0, 3)
rotate_right = Button(50, 50, dis_width - 230, 25, gray4, 10, 0, 4)
balance_setter = Button(120, 50, dis_width - 150, 25, gray3, 10, 0, 5)
map_name_text_box = Button(500, 40, 30, dis_height - 50, gray3, 10, 0, 6)
import_button = Button(100, 50, 275, 25, gray, 10, 0, 7)

custom_map_value_rotation = [
    [1, 2, 3, 4, 5, 12, 13],
    [14, 15, 16, 17, 18, 19, 6],
    [7, 8, 9, 10, 11, 20, 21],
    [22]
]
for rotation in custom_map_value_rotation:
    i = 0
    for val in rotation:
        map_value_button = Button(40, 40, dis_width - 720 + i * 70, 30, map_value_to_color[val], 12, 0, val)
        i += 1

custom_gameboard = []
i = 0
for r in range(14):
    l = []
    for c in range(32):
        l.append(0)
        grid_space = Button(39, 39, c * (40), r * (40) + 100, white, 11, 0, i)
        i += 1
    custom_gameboard.append(l)
empty_custom_gameboard = copy.deepcopy(custom_gameboard)

map_choice = 0
error_visibility_timer = 0
next_level_button = Button(400, 90, dis_width / 2 - 200, 150, red, 2, 0, 0)
replay_button = Button(400, 90, dis_width / 2 - 200, 290, violet, 2, 0, 1)
return_to_menu_button = Button(400, 90, dis_width / 2 - 200, 430, gray, 2, 0, 2)
custom_map_menu_opened = False
reset_confirmation = False
previously_chosen_unit = 14

while in_main_menu:
    playing = False
    level_select_menu = False
    settings_menu = False
    unit_selection_menu = False
    custom_map_menu = False
    map_value = 0
    rotation_num = 0
    erasing = False
    num_choice_string = '0'
    balance_string = '0'
    custom_map_name = 'Custom Map'
    saving_error = False
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            in_main_menu = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                in_main_menu = False
        if event.type == pygame.MOUSEBUTTONDOWN:
            mouse_pos = pygame.mouse.get_pos()
            i = 0
            for button in main_menu_button_sprites:
                if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                    if i == 0:
                        playing = True
                    if i == 1:
                        level_select_menu = True
                    if i == 2:
                        settings_menu = True
                    if i == 3:
                        unit_selection_menu = True
                    if i == 4:
                        custom_map_menu = True
                        map_value = 0
                        rotation_num = 0
                        erasing = False
                        num_choice_string = '0'
                        balance_string = '0'
                        custom_map_name = 'Custom Map'
                        saving_error = False
                        visible_map_value_button_sprites.empty()
                        for button in map_value_button_sprites:
                            for val in custom_map_value_rotation[rotation_num]:
                                if val == button.type2:
                                    visible_map_value_button_sprites.add(button)
                i += 1
    while custom_map_menu:
        custom_map_menu_opened = True
        custom_map_creation_menu = False
        custom_map_select_menu = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                custom_map_menu = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    custom_map_menu = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                i = 0
                for button in custom_map_menu_button_sprites:
                    if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                        if i == 0:
                            custom_map_select_menu = True
                        if i == 1:
                            custom_gameboard = copy.deepcopy(empty_custom_gameboard)
                            for gs in grid_space_sprites:
                                gs.count = 0
                                gs.change_color(white)
                            num_choice_string = '0'
                            map_value = 0
                            erasing = False
                            balance_string = '0'
                            custom_map_name = 'Custom Map'
                            custom_map_creation_menu = True
                    i += 1
        while custom_map_select_menu:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    custom_map_select_menu = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        custom_map_select_menu = False
                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = pygame.mouse.get_pos()
                    level_deleted = False
                    i = 0
                    for button in custom_map_delete_button_sprites:
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                            map_name = custom_map_names[i]
                            if not map_name == 'place_holder':
                                deletion_confirmation_menu = True
                                deleting_map_name = map_name
                                while deletion_confirmation_menu:
                                    for event2 in pygame.event.get():
                                        if event2.type == pygame.QUIT:
                                            deletion_confirmation_menu = False
                                        if event2.type == pygame.KEYDOWN:
                                            if event2.key == pygame.K_ESCAPE:
                                                deletion_confirmation_menu = False
                                        if event2.type == pygame.MOUSEBUTTONDOWN:
                                            mouse_pos = pygame.mouse.get_pos()
                                            i3 = 0
                                            for confirmation_button in purchase_confirmation_sprites:
                                                if confirmation_button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                                    if i3 == 0:
                                                        deletion_confirmation_menu = False
                                                    if i3 == 1:
                                                        if os.path.exists(f"custom_maps/{map_name}.txt"):
                                                            os.remove(f"custom_maps/{map_name}.txt")
                                                            custom_map_names.pop(i)
                                                            custom_map_list.pop(i)
                                                            custom_map_balance_values.pop(i)
                                                            custom_map_values.pop(-1)
                                                            custom_high_score_list.pop(i)
                                                            i2 = 0
                                                            for s in custom_map_select_button_sprites:
                                                                if i == i2:
                                                                    s.kill()
                                                                i2 += 1
                                                            i2 = 0
                                                            for s in custom_map_delete_button_sprites:
                                                                if i == i2:
                                                                    s.kill()
                                                                i2 += 1
                                                            level_deleted = True
                                                            deletion_confirmation_menu = False
                                                        else:
                                                            print("no lol")
                                                            deletion_confirmation_menu = False
                                                i3 += 1
                                    dis_update(0, 14)
                        i += 1
                    i = 0
                    if not level_deleted:
                        for button in custom_map_select_button_sprites:
                            if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                map_choice = custom_map_values[i]
                            i += 1

            dis_update(0, 11)
        while custom_map_creation_menu:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    custom_map_creation_menu = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        custom_map_creation_menu = False
                if event.type == pygame.MOUSEBUTTONDOWN:
                    mouse_pos = pygame.mouse.get_pos()
                    for button in visible_map_value_button_sprites:
                        if button.rect.collidepoint(mouse_pos):
                            map_value = button.type2
                            num_choice_string = f'{button.type2}'

                    i = 0
                    for button in custom_map_button_sprites:
                        if button.rect.collidepoint(mouse_pos):
                            if i == 0:
                                try:
                                    custom_map_file = open(f"custom_maps/{custom_map_name}.txt", "x")
                                    custom_map_file.write(custom_map_name + "\n")
                                    custom_map_file.write(balance_string + "\n")
                                    custom_map_file.write('0' + "\n")
                                    i2 = 0
                                    for element in custom_gameboard:
                                        custom_map_file.write(f'{element}' + "\n")
                                        i2 += 1
                                    custom_map_file.close()

                                    custom_map_names.append(custom_map_name)
                                    custom_map_names = sorted(custom_map_names)
                                    i3 = 0
                                    for name in custom_map_names:
                                        if name == custom_map_name:
                                            new_map_list_position = i3
                                        i3 += 1
                                    custom_map_list.insert(new_map_list_position, custom_gameboard)
                                    custom_map_balance_values.insert(new_map_list_position, int(balance_string))
                                    custom_high_score_list.insert(new_map_list_position, 0)
                                    custom_map_values.append(custom_map_values[-1]-1)
                                    custom_map_select_button_sprites.empty()
                                    automated_menu_maker(custom_map_list, 20, 20, 20, 20, 20, green, 14)
                                    custom_map_delete_button_sprites.empty()
                                    for unit_button in custom_map_select_button_sprites:
                                        delete_button = Button(100, 35, unit_button.rect.x + 15,
                                                               unit_button.rect.y + 100, red, 16, 0, i)
                                        i += 1
                                except:
                                    saving_error = True
                            if i == 1:
                                if not erasing:
                                    erasing = True
                                elif erasing:
                                    erasing = False
                            if i == 2:
                                inputting = True
                                while inputting:
                                    event = pygame.event.poll()

                                    if event.type == pygame.KEYDOWN:
                                        key = pygame.key.name(event.key)  # Returns string id of pressed key.
                                        for num in range(0, 10):
                                            if key == str(num):
                                                num_choice_string += key
                                            if key == 'backspace':
                                                num_choice_string = num_choice_string[:len(num_choice_string) - 1]
                                            if key == 'return':
                                                if num_choice_string == '':
                                                    num_choice_string = '1'
                                                map_value = int(num_choice_string)
                                                typed = True
                                                inputting = False
                                    dis_update(0, 9)
                            if i == 3:
                                if rotation_num > 0:
                                    rotation_num -= 1
                                visible_map_value_button_sprites.empty()
                                for button in map_value_button_sprites:
                                    for val in custom_map_value_rotation[rotation_num]:
                                        if val == button.type2:
                                            visible_map_value_button_sprites.add(button)
                            if i == 4:
                                if rotation_num < len(custom_map_value_rotation) - 1:
                                    rotation_num += 1
                                visible_map_value_button_sprites.empty()
                                for button in map_value_button_sprites:
                                    for val in custom_map_value_rotation[rotation_num]:
                                        if val == button.type2:
                                            visible_map_value_button_sprites.add(button)
                            if i == 5:
                                inputting = True
                                while inputting:
                                    event = pygame.event.poll()

                                    if event.type == pygame.KEYDOWN:
                                        key = pygame.key.name(event.key)  # Returns string id of pressed key.
                                        for num in range(0, 10):
                                            if key == str(num):
                                                balance_string += key
                                            if key == 'backspace':
                                                balance_string = balance_string[:len(balance_string) - 1]
                                            if key == 'return':
                                                if balance_string == '':
                                                    balance_string = '0'
                                                typed = True
                                                inputting = False
                                    dis_update(0, 9)
                            if i == 6:
                                inputting = True
                                while inputting:
                                    key_upper = False
                                    keys = pygame.key.get_pressed()
                                    if keys[pygame.K_LSHIFT] or keys[pygame.K_RSHIFT]:
                                        key_upper = True
                                    event = pygame.event.poll()
                                    if event.type == pygame.KEYDOWN:
                                        key = pygame.key.name(event.key)  # Returns string id of pressed key.
                                        if key == 'backspace':
                                            custom_map_name = custom_map_name[:len(custom_map_name) - 1]
                                        elif key == 'return':
                                            if custom_map_name == '':
                                                custom_map_name = 'Custom Map'
                                            typed = True
                                            inputting = False
                                        elif key == 'space':
                                            custom_map_name += ' '
                                        elif key == 'left shift' or key == 'right shift':
                                            pass
                                        else:
                                            if key_upper:
                                                custom_map_name += key.upper()
                                            else:
                                                custom_map_name += key
                                    dis_update(0, 9)
                            if i == 7:
                                importing_custom_map = True
                                while importing_custom_map:
                                    for event in pygame.event.get():
                                        if event.type == pygame.QUIT:
                                            importing_custom_map = False
                                        if event.type == pygame.KEYDOWN:
                                            if event.key == pygame.K_ESCAPE:
                                                importing_custom_map = False
                                        if event.type == pygame.MOUSEBUTTONDOWN:
                                            mouse_pos = pygame.mouse.get_pos()
                                            i = 0
                                            for button in custom_map_select_button_sprites:
                                                if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                                    custom_gameboard = custom_map_list[i]
                                                    for grid_space in grid_space_sprites:
                                                        grid_space.count = custom_gameboard[int(
                                                            (grid_space.rect.y - 100) / 40)][int((grid_space.rect.x) / 40)]
                                                        grid_space.change_color( map_value_to_color[grid_space.count])
                                                    custom_map_name = custom_map_names[i]
                                                    balance_string = str(custom_map_balance_values[i])
                                                    pygame.time.wait(100)
                                                    importing_custom_map = False

                                                i += 1
                                    dis_update(0, 12)
                        i += 1
            mouse = pygame.mouse.get_pressed()
            if mouse[0] == True:
                mouse_pos = pygame.mouse.get_pos()
                for grid_space in grid_space_sprites:
                    if grid_space.rect.collidepoint(mouse_pos):
                        if not erasing:
                            grid_space.count = map_value
                        elif erasing:
                            grid_space.count = 0
                        grid_space.change_color(map_value_to_color[grid_space.count])
                        custom_gameboard[int((grid_space.rect.y - 100) / 40)][
                            int((grid_space.rect.x) / 40)] = grid_space.count
            dis_update(0, 9)

        dis_update(0, 10)
    while unit_selection_menu:
        purchasing_unit = 0
        stats_button_pressed = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                unit_selection_menu = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    unit_selection_menu = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                i = 0
                for statistics_button in unit_stats_menu_sprites:
                    statistics_menu = False
                    if statistics_button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                        stats_button_pressed = True
                        active_stat_sheet = [unit_names_list[i], unit_cost_list[i], unit_health_list[i],
                                             unit_damage_list[i], unit_fire_rate_list[i], unit_range_list[i],
                                             unit_speed_list[i], unit_spawn_rate_list[i], unit_size_list[i],
                                             unit_message_list[i], unit_message_list2[i]]
                        statistics_menu = True
                        while statistics_menu:
                            for event in pygame.event.get():
                                if event.type == pygame.QUIT:
                                    statistics_menu = False
                                if event.type == pygame.KEYDOWN:
                                    if event.key == pygame.K_ESCAPE:
                                        statistics_menu = False
                            dis_update(0, 15)
                    i += 1
                if not stats_button_pressed:
                    i = 0
                    for button in unit_selection_menu_sprites:
                        resolved = False
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]) and unit_unlock_list[i] == 0:
                            i2 = 0
                            for u in chosen_unit_list:
                                if u == i:
                                    chosen_unit_list[i2] = -1
                                    resolved = True
                                i2 += 1
                            if not resolved:
                                i2 = 0
                                for u in chosen_unit_list:
                                    if u == -1:
                                        chosen_unit_list[i2] = i
                                        break
                                    i2 += 1
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]) and unit_unlock_list[
                            i] == 1 and total_purchasing_balance >= unit_purchase_cost_list[i]:
                            purchase_confirmation = True
                            purchase_confirmed = False
                            purchasing_unit = i
                            while purchase_confirmation:
                                for event in pygame.event.get():
                                    if event.type == pygame.QUIT:
                                        purchase_confirmation = False
                                    if event.type == pygame.KEYDOWN:
                                        if event.key == pygame.K_ESCAPE:
                                            purchase_confirmation = False
                                    if event.type == pygame.MOUSEBUTTONDOWN:
                                        mouse_pos = pygame.mouse.get_pos()
                                        i = 0
                                        for button in purchase_confirmation_sprites:
                                            if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                                if i == 0:
                                                    purchase_confirmation = False
                                                if i == 1:
                                                    purchase_confirmed = True
                                            i += 1
                                if purchase_confirmed:
                                    total_purchasing_balance -= unit_purchase_cost_list[purchasing_unit]
                                    unit_unlock_list[purchasing_unit] = 0
                                    purchase_confirmation = False
                                dis_update(0, 8)
                        i += 1
        dis_update(0, 7)
    while settings_menu:
        control_menu = False
        display_menu = False
        audio_menu = False
        reset_menu = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                settings_menu = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    settings_menu = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                i = 0
                for button in settings_menu_button_sprites:
                    if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                        if i == 0:
                            control_menu = True
                        if i == 1:
                            display_menu = True
                        if i == 2:
                            audio_menu = True
                        if i == 3:
                            reset_menu = True
                    i += 1
            while control_menu:
                control_choice = 999
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        control_menu = False
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            control_menu = False
                    if event.type == pygame.MOUSEBUTTONDOWN:
                        mouse_pos = pygame.mouse.get_pos()
                        i = 0
                        for button in control_menu_button_sprites:
                            if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                control_choice = i
                                control_change = True
                                while control_change:
                                    for event in pygame.event.get():
                                        if event.type == pygame.QUIT:
                                            control_change = False
                                        if event.type == pygame.KEYDOWN:
                                            if event.key == pygame.K_ESCAPE:
                                                control_change = False
                                            else:
                                                button_control_list[control_choice] = event.key
                                                control_change = False
                                    dis_update(0, 4)
                            i += 1
                dis_update(0, 4)
            while display_menu:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        display_menu = False
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            display_menu = False
                    if event.type == pygame.MOUSEBUTTONDOWN:
                        mouse_pos = pygame.mouse.get_pos()
                        i = 0
                dis_update(0, 5)
            while audio_menu:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        audio_menu = False
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            audio_menu = False
                    if event.type == pygame.MOUSEBUTTONDOWN:
                        mouse_pos = pygame.mouse.get_pos()
                        i = 0
                dis_update(0, 6)
            while reset_menu:
                reset_confirmation = False
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        reset_menu = False
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_ESCAPE:
                            reset_menu = False
                    if event.type == pygame.MOUSEBUTTONDOWN:
                        mouse_pos = pygame.mouse.get_pos()
                        i = 0
                        for button in purchase_confirmation_sprites:
                            if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                                if i == 0:
                                    reset_confirmation = False
                                    reset_menu = False
                                if i == 1:
                                    reset_confirmation = True
                                    reset_menu = False
                            i += 1
                        if reset_confirmation:
                            with open("default_info.txt") as info:
                                default_info = info.readlines()
                            print(default_info)
                            with open("user_info.txt", "w") as user_info:
                                user_info.writelines(default_info)
                dis_update(0, 13)
        dis_update(0, 3)
    while level_select_menu:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                level_select_menu = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    level_select_menu = False
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                i = 0
                for button in level_select_menu_button_sprites:
                    if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]) and level_unlock_list[i] == 0:
                        map_choice = i
                    i += 1
        dis_update(0, 2)
    if playing:
        level_creation(map_choice)
    prev_time = time.time()
    while playing:
        dis_val = 1
        now = time.time()
        dt = now - prev_time
        prev_time = now

        i = 0
        for unit in unit_list:
            i += 1
        if i == 0 and current_balance < 10:
            level_lost = True

        if hq_destroyed:
            if map_choice >= 0:
                if hq_just_destroyed:
                    current_balance += map_completion_bonus[map_choice]
                    hq_just_destroyed = False
                if current_balance > high_score_list[map_choice]:
                    high_score_list[map_choice] = current_balance
                if map_choice + 1 < len(map_list):
                    level_unlock_list[map_choice + 1] = 0
            else:
                if current_balance > custom_high_score_list[map_choice * -1 - 1]:
                    custom_high_score_list[map_choice * -1 - 1] = current_balance

        for button in game_play_button_sprites:
            button.count += 60 * dt

        keys_pressed = []
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                playing = False
                dis_val = 0
                for sprite in all_gameplay_sprites:
                    sprite.kill()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    if -1 < map_choice:
                        if past_high_score < high_score_list[map_choice]:
                            total_purchasing_balance += high_score_list[map_choice] - past_high_score
                    playing = False
                    dis_val = 0
                    for sprite in all_gameplay_sprites:
                        sprite.kill()
            if event.type == pygame.MOUSEBUTTONDOWN:
                mouse_pos = pygame.mouse.get_pos()
                if not hq_destroyed:
                    i = 0
                    for button in game_play_button_sprites:
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                            if button.type2 == chosen_unit_list[i] and button.count > unit_spawn_rate_list[
                                button.type2] and current_balance >= unit_cost_list[button.type2]:
                                button.spawn_unit(start_location)
                                current_balance -= unit_cost_list[button.type2]
                                button.count = 0
                        i += 1
                if hq_destroyed:
                    previously_chosen_unit = 14
                    i = 0
                    for button in win_sprites:
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                            if -1 < map_choice:
                                if past_high_score < high_score_list[map_choice]:
                                    total_purchasing_balance += high_score_list[map_choice] - past_high_score
                            if i == 0 and 0 < map_choice + 1 < len(map_list):
                                map_choice += 1
                                level_creation(map_choice)
                            if i == 1:
                                level_creation(map_choice)
                            if i == 2:
                                playing = False
                                dis_val = 0
                                for sprite in all_gameplay_sprites:
                                    sprite.kill()
                        i += 1
                if level_lost:
                    previously_chosen_unit = 14
                    i = 0
                    for button in lose_sprites:
                        if button.rect.collidepoint(mouse_pos[0], mouse_pos[1]):
                            if i == 0:
                                level_creation(map_choice)
                            if i == 1:
                                playing = False
                                dis_val = 0
                                for sprite in all_gameplay_sprites:
                                    sprite.kill()
                        i += 1
        keys = pygame.key.get_pressed()
        i = 0
        for button in button_control_list:
            if keys[button_control_list[i]]:
                keys_pressed.append(i)
            i += 1
        if not hq_destroyed:
            for button in game_play_button_sprites:
                for key in keys_pressed:
                    if button.mimic:
                        button.type2 = previously_chosen_unit
                    if button.original_type == chosen_unit_list[key] and button.count >\
                            unit_spawn_rate_list[button.type2] and current_balance >= unit_cost_list[button.type2]:
                        button.spawn_unit(start_location)
                        current_balance -= unit_cost_list[button.type2]
                        previously_chosen_unit = button.type2
                        button.count = 0

        for unit in unit_list:
            if unit.health <= 0:
                unit.kill()
            if unit.type2 == 11 or unit.type2 == 13:
                unit.count3 += 60 * dt
                if unit.count3 >= summoner_summon_speed and unit.type2 == 11:
                    summoned_unit = Combatant(unit_size_list[-2], unit_size_list[-2], unit.rect.x + 10,
                                              unit.rect.y + 10, blue, 1, 0, -2)
                    summoned_unit.count = unit.count
                    unit.count3 = 0
                if unit.count3 >= leprechaun_money_speed and unit.type2 == 13:
                    current_balance += leprechaun_money_total
                    unit.count3 = 0
            unit.count2 += 60 * dt

            track_collision = False
            repeat_angle = False
            past_collision_angles = []
            for track in track_list:
                # for tower in tower_list:
                # for tower in tower_list:
                #     if unit.rect.colliderect(tower):
                #          unit.movement_val = 0
                if unit.rect.colliderect(track):
                    for ang in past_collision_angles:
                        if ang == track.angle:
                            repeat_angle = True
                        if unit.type2 != 12:
                            unit.angle = -track.angle
                            unit.angle2 = -track.angle
                            if math.pi <= track.angle < 3 * math.pi / 2:
                                unit.angle = unit.angle * -1
                                unit.angle2 = unit.angle2 * -1
                            elif 3 * math.pi / 2 <= track.angle <= 2 * math.pi:
                                unit.angle += 2 * math.pi
                                unit.angle2 += 2 * math.pi
                    if not repeat_angle:
                        unit.rect.x += unit_speed_list[unit.type2] * math.cos(track.angle) * dt * 50 * unit.movement_val
                        unit.rect.y -= unit_speed_list[unit.type2] * math.sin(track.angle) * dt * 50 * unit.movement_val
                        unit.count += unit.movement_val
                        track_collision = True
                        past_collision_angles.append(track.angle)
            if not track_collision:
                unit.kill()
                current_balance += unit_cost_list[unit.type2]

            if unit.type2 == 9 and unit.count2 > unit_fire_rate_list[unit.type2]:
                for unit2 in unit_list:
                    unit_unit_dist = math.dist(unit2.rect.center, unit.rect.center) - tower.rect.width / 2
                    if unit_unit_dist <= unit_range_list[unit.type2] and unit2.health < 30 + unit_health_list[
                        unit2.type2]:
                        unit.target(unit2)
                        unit.count2 = 0

            tower_in_range = False
            prev_calc = False
            for tower in tower_list:
                if unit.rect.colliderect(tower) and unit.type2 != 12:
                    unit.movement_val = 0
                elif unit.rect.colliderect(tower) and tower.type2 == 0:
                    unit.movement_val = 0
                tower_unit_dist = math.dist(tower.rect.center, unit.rect.center) - tower.rect.width / 2
                tower_unit_dist_x = tower.rect.centerx - unit.rect.centerx
                tower_unit_dist_y = tower.rect.centery - unit.rect.centery
                if tower_unit_dist < unit_range_list[unit.type2] and unit.count2 > unit_fire_rate_list[unit.type2]:
                    if unit.type2 != 9:
                        unit.target(tower)
                        unit.count2 = 0
                    # if unit.type2 == 3:
                    #     unit.kill()
                    if unit.type2 == 7:
                        unit.target(unit)
                    if unit.type2 == 8:
                        unit.health += unit_damage_list[unit.type2]
                if tower_unit_dist < unit_range_list[unit.type2]:
                    if unit.type2 != 3 and unit.type2 != 9 and unit.type2 != 10 and unit.type2 != 12 and not prev_calc:
                        if not tower_unit_dist_x == 0:
                            if (tower_unit_dist_x) > 0:
                                unit.angle = math.atan((tower_unit_dist_y) / (tower_unit_dist_x))
                            elif (tower_unit_dist_x) < 0:
                                unit.angle = math.atan(
                                    (tower_unit_dist_y) / (tower_unit_dist_x)) + \
                                             math.pi
                        elif (tower_unit_dist_y) > 0:
                            unit.angle = math.pi / 2
                        elif (tower_unit_dist_y) < 0:
                            unit.angle = math.pi / 2 + math.pi
                        prev_calc = True
                    stop_val = random.randint(0, 15)
                    if stop_val == 1 and unit.type2 != 12:
                        unit.movement_val = 0
                    tower_in_range = True
                    if unit.type2 == 13 and unit.count3 >= leprechaun_money_speed-1:
                        current_balance += leprechaun_money_total
            if not tower_in_range:
                unit.movement_val = 1
        for tower in tower_list:
            prime_target = [0, 0, 0]
            if tower.health <= 0:
                if tower.type2 == 2:
                    if tower.angle == 0:
                        maleable_gameplay_map[int(tower.rect.y / 40)][int(tower.rect.x / 40) + 1] = 0
                    if tower.angle == 1:
                        maleable_gameplay_map[int(tower.rect.y / 40) + 1][int(tower.rect.x / 40)] = 0
                    for r in maleable_gameplay_map:
                        print(r)
                else:
                    maleable_gameplay_map[int(tower.rect.y / 40)][int(tower.rect.x / 40)] = 0
                tower.kill()
                current_balance += tower_value_list[tower.type2]
                if tower.type2 == 0:
                    hq_destroyed = True
            tower.count += 60 * dt
            tower_target_list = []
            for unit in unit_list:
                unit_tower_dist = math.dist(tower.rect.center, unit.rect.center) - unit.rect.width / 2
                if unit_tower_dist < tower_range_list[tower.type2]:
                    distance_unit_traveled = unit.count * unit_speed_list[unit.type2]
                    unit_tower_dist_x = unit.rect.centerx - tower.rect.centerx
                    unit_tower_dist_y = unit.rect.centery - tower.rect.centery
                    if not unit_tower_dist_x == 0:
                        if (unit_tower_dist_x) > 0:
                            angle = math.atan((unit_tower_dist_y) / (unit_tower_dist_x))
                        elif (unit_tower_dist_x) < 0:
                            angle = math.atan(
                                (unit_tower_dist_y) / (unit_tower_dist_x)) + \
                                    math.pi
                    elif (unit_tower_dist_y) > 0:
                        angle = math.pi / 2
                    elif (unit_tower_dist_y) < 0:
                        angle = math.pi / 2 + math.pi
                    tower_target_list.append([unit, distance_unit_traveled, angle])

            current_furthest_distance = 0
            for target in tower_target_list:
                if target[1] > current_furthest_distance:
                    current_furthest_distance = target[1]
                    prime_target = target
            if not current_furthest_distance == 0 and tower.count > tower_fire_rate_list[tower.type2]:
                tower.count = 0
                if prime_target[0].type2 != 12:
                    tower.target(prime_target[0])
                    if tower.type2 == 5 or tower.type2 == 6:
                        for unit in unit_list:
                            if unit.type2 != 12:
                                unit_blast_dist = math.dist(prime_target[0].rect.center, unit.rect.center) - unit.rect.width / 2
                                if unit_blast_dist < 100 and tower.type2 == 5:
                                    tower.target(unit)
                                if unit_blast_dist < 200 and tower.type2 == 6:
                                    tower.target(unit)
            if not current_furthest_distance == 0 and tower.type2 != 2:
                tower.angle = prime_target[2]

        dis_update(0, dis_val)
        clock.tick(frmrt)

    dis_update(0, 0)
    clock.tick(frmrt)

list_of_original_lists = [button_control_list, level_unlock_list, high_score_list, chosen_unit_list, unit_unlock_list,
                          [total_purchasing_balance]]
list_of_adjusted_lists = ['', '', '', '', '', '']
i = 0
for l in list_of_original_lists:
    for c in l:
        list_of_adjusted_lists[i] += f"{c} "
    i += 1
if not reset_confirmation:
    with open("user_info.txt") as user_info:
        info = user_info.readlines()
        i = 1
        for l in list_of_adjusted_lists:
            info[i] = f'{l}\n'
            i += 2
    with open("user_info.txt", "w") as user_info:
        user_info.writelines(info)

if custom_map_menu_opened:
    i = 0
    for filename in os.scandir('custom_maps'):
        if filename.is_file():
            with open(filename) as custom_map_data:
                map_info = custom_map_data.readlines()
                map_info[0] = f'{custom_map_names[i]}\n'
                map_info[1] = f'{custom_map_balance_values[i]}\n'
                map_info[2] = f'{custom_high_score_list[i]}\n'
                i2 = 3
                for r in custom_map_list[i]:
                    map_info[i2] = f'{r}\n'
                    i2 += 1
            with open(filename, "w") as custom_map_data:
                custom_map_data.writelines(map_info)
            i += 1

pygame.quit()
